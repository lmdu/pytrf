API Reference
=============

stria.version
-------------

.. py:function:: stria.version()

	Get current version of stria

	:return: version

	:rtype: str

stria.SSRMiner
--------------

.. py:class:: stria.SSRMiner(name, seq, min_repeats=[12,7,5,4,4,4])

	Find all microsatellites or SSRs that meet the minimum repeats on the input sequence

	:param str name: the sequence name

	:param str seq: the input sequence

	:min_repeats list: minimum number of repeats for mono, di, tri, tetra, penta, hexa, default (12,7,5,4,4,4), corresponding to 12 for mono, 7 for di, 5 for tri and 4 for tetra, penta, hexa

	:return: SSRMiner object

	.. py:method:: as_list()

		Put all SSRs in a list and return, each SSR in list has 7 columns including [sequence name, start position, end position, motif sequence, motif length, repeats, SSR length]

		:return: all SSRs found

		:rtype: list

stria.VNTRMiner
---------------

.. py:class:: stria.VNTRMiner(name, seq, min_motif_size=7, max_motif_size=30, min_repeat=2)

	Find all minisatellites or VNTRs that meet the minimum repeat on the input sequence

	:param str name: the sequence name

	:param str seq: the input sequence

	:param int min_motif_size: minimum length of motif

	:param int max_motif_size: maximum length of motif

	:param int min_repeat: minimum number of repeats

	:return: VNTRMiner object

	.. py:method:: as_list()

		Put all VNTRs in a list and return, each VNTR in list has 7 columns including [sequence name, start position, end position, motif sequence, motif length, repeats, VNTR length]

		:return: all VNTRs found

		:rtype: list

stria.ITRMiner
--------------

.. py:class:: stria.ITRMiner(name, seq, min_motif_size=1, max_motif_size=6, seed_min_repeat=3, seed_min_length=10, max_continuous_errors=2, substitution_penalty=0.5, insertion_penalty=1.0, deletion_penalty=1.0, min_match_ratio=0.7, max_extend_length=2000)

	Find all imperfect tandem repeats from the input sequence

	:param str name: the sequence name

	:param str seq: the input sequence

	:param int min_motif_size: minimum length of motif

	:param int max_motif_size: maximum length of motif

	:param int seed_min_repeat: minimum number of repeat for seed

	:param int seed_min_length: minimum length of seed

	:param int max_continuous_errors: maximum number of continuous aligned errors allowed

	:param float substitution_penalty: penaly for substitution

	:param float insertion_penalty: penaly for insertion

	:param float deletion_penalty: penalty for deletion

	:param float min_match_ratio: minimum match ratio for extending alignment

	:param int max_extend_length: maximum length allowed to extend

	:return: ITRMiner object

	.. py:method:: as_list()

		Put all ITRs in a list and return, each ITR in list has 11 columns including [sequence name, start position, end position, motif sequence, motif length, ITR length, matches, substitutions, insertions, deletions, identity]

stria.ETR
---------

.. py:class:: stria.ETR

	Readonly exact tandem repeat (ETR) object generated by iterating over SSRMiner or VNTRMiner object

	.. py:attribute:: chrom

		chromosome or sequence name where ETR located on

	.. py:attribute:: start

		ETR one-based start position on sequence

	.. py:attribute:: end

		ETR one-based end position on sequence

	.. py:attribute:: motif

		motif sequence

	.. py:attribute:: type

		motif length

	.. py:attribute:: repeats

		number of repeats

	.. py:attribute:: length

		length of ETR

	.. py:attribute:: seq

		get the sequence of ETR

	.. py:method:: as_list()

		convert ETR object to a list

	.. py:method:: as_dict()

		convert ETR object to a dict

	.. py:method:: as_gff()

		convert ETR object to a gff formatted string

	.. py:method:: as_string(separator='\t', terminator='')

		convert ETR object to a TSV or CSV string by using separator and terminator

		:param str separator: a separator between columns

		:param str terminator: a terminator added to the end of string

		:return: a formatted string

		:rtype: str

stria.ITR
---------

.. py:class:: stria.ITR

	Readonly imperfect tandem repeat (ITR) object generated by iterating over ITRMiner object

	.. py:attribute:: chrom

		chromosome or sequence name where ITR located on

	.. py:attribute:: start

		ETR one-based start position on sequence

	.. py:attribute:: end

		ETR one-based end position on sequence

	.. py:attribute:: motif

		motif sequence

	.. py:attribute:: type

		motif length

	.. py:attribute:: length

		length of ITR

	.. py:attribute:: matches

		number of matches

	.. py:attribute:: substitutions

		number of substitutions

	.. py:attribute:: insertions

		number of insertions

	.. py:attribute:: deletions

		number of deletions

	.. py:attribute:: identity

		similar identity

	.. py:attribute:: seq

		get the sequence of ITR

	.. py:method:: as_list()

		convert ITR object to a list

	.. py:method:: as_dict()

		convert ITR object to a dict

	.. py:method:: as_gff()

		convert ITR object to a gff formatted string

	.. py:method:: as_string(separator='\t', terminator='')

		convert ITR object to a TSV or CSV string by using separator and terminator

		:param str separator: a separator between columns

		:param str terminator: a terminator added to the end of string

		:return: a formatted string

		:rtype: str
